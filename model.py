import pandas as pd

from typing import Dict
from .scoring import process_data
from model.utils import mlog


def predict(data: pd.DataFrame, dicts: Dict[str, pd.DataFrame]) -> pd.DataFrame:
    """ this function must apply logic to input data and return the result data """
    mlog('\n\n\n------------ batch scoring started --------------\n')
    df_opti_step1 = None
    if dicts is not None and len(dicts) > 0:
        mlog(f'len(dicts)={len(dicts)}')
        mlog(f'dicts.keys={list(dicts.keys())}')

        df_opti_step1 = dicts['nsi.opti_step1_criterion']
        df_opti_step1.columns = [c.lower() for c in df_opti_step1.columns]
        mlog(f'loaded df_opti_step1.shape={df_opti_step1.shape}')

    # пока модель в разработке используем кривой код для запуска и тестирования отдельных моделей
    if '__testing' in data.columns:
        df_opti_step1 = pd.read_csv('test_cases/drgnet/opti_step1_criterion.csv', sep=';')
        mlog(f'loaded local df_opti_step1.shape={df_opti_step1.shape}')

    data_ret = process_data(data, df_opti_step1)
    mlog('-------------- batch scoring done ---------------\n\n')
    return data_ret
